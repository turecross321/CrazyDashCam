// <auto-generated />
using System;
using CrazyDashCam.Shared.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrazyDashCam.Shared.Migrations
{
    [DbContext(typeof(TripDbContext))]
    [Migration("20250124233932_AddHighlight")]
    partial class AddHighlight
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbAmbientAirTemperature", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Date");

                    b.ToTable("AmbientAirTemperatures");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbCoolantTemperature", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Date");

                    b.ToTable("CoolantTemperatures");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbFuelLevel", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Date");

                    b.ToTable("FuelLevels");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbHighlight", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Date");

                    b.ToTable("Highlights");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbLocation", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Date");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbOilTemperature", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Date");

                    b.ToTable("OilTemperatures");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbRpm", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Date");

                    b.ToTable("Rpms");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbSpeed", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Date");

                    b.ToTable("Speeds");
                });

            modelBuilder.Entity("CrazyDashCam.Shared.Database.DbThrottlePosition", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Date");

                    b.ToTable("ThrottlePositions");
                });
#pragma warning restore 612, 618
        }
    }
}
